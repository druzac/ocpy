type token =
  | NEWLINE
  | INDENT
  | DEDENT
  | ENDMARKER
  | INDENT_SPACE of (int)
  | FALSE
  | CLASS
  | FINALLY
  | IS
  | RETURN
  | NONE
  | CONTINUE
  | FOR
  | LAMBDA
  | TRY
  | TRUE
  | DEF
  | FROM
  | NONLOCAL
  | WHILE
  | AND
  | DEL
  | GLOBAL
  | NOT
  | WITH
  | AS
  | ELIF
  | IF
  | OR
  | YIELD
  | ASSERT
  | ELSE
  | IMPORT
  | PASS
  | BREAK
  | EXCEPT
  | IN
  | RAISE
  | PLUS
  | MINUS
  | STAR
  | DSTAR
  | SLASH
  | DSLASH
  | PERCENT
  | DLT
  | DGT
  | AMP
  | PIPE
  | CARET
  | TILDE
  | LT
  | GT
  | LTEQ
  | GTEQ
  | DEQ
  | NOTEQ
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | COMMA
  | COLON
  | DOT
  | SEMICOLON
  | ATSYM
  | EQ
  | PLUSEQ
  | MINUSEQ
  | STAREQ
  | SLASHEQ
  | DSLASHEQ
  | PERCENTEQ
  | AMPEQ
  | PIPEEQ
  | CARETEQ
  | DGTEQ
  | DLTEQ
  | DSTAREQ
  | ELLIPSIS
  | STRING of (string)
  | NAME of (string)
  | NUMBER of (int)

open Parsing;;
# 3 "parser.mly"
(*open Printf*)
open Ast
exception Parse_error of string

(*let arith_op_map = function
    | PLUS -> Plus
    | MINUS -> Minus
    | _ -> raise Parse_error ("Unexpected character")
    *)

# 101 "parser.ml"
let yytransl_const = [|
  257 (* NEWLINE *);
  258 (* INDENT *);
  259 (* DEDENT *);
  260 (* ENDMARKER *);
  262 (* FALSE *);
  263 (* CLASS *);
  264 (* FINALLY *);
  265 (* IS *);
  266 (* RETURN *);
  267 (* NONE *);
  268 (* CONTINUE *);
  269 (* FOR *);
  270 (* LAMBDA *);
  271 (* TRY *);
  272 (* TRUE *);
  273 (* DEF *);
  274 (* FROM *);
  275 (* NONLOCAL *);
  276 (* WHILE *);
  277 (* AND *);
  278 (* DEL *);
  279 (* GLOBAL *);
  280 (* NOT *);
  281 (* WITH *);
  282 (* AS *);
  283 (* ELIF *);
  284 (* IF *);
  285 (* OR *);
  286 (* YIELD *);
  287 (* ASSERT *);
  288 (* ELSE *);
  289 (* IMPORT *);
  290 (* PASS *);
  291 (* BREAK *);
  292 (* EXCEPT *);
  293 (* IN *);
  294 (* RAISE *);
  295 (* PLUS *);
  296 (* MINUS *);
  297 (* STAR *);
  298 (* DSTAR *);
  299 (* SLASH *);
  300 (* DSLASH *);
  301 (* PERCENT *);
  302 (* DLT *);
  303 (* DGT *);
  304 (* AMP *);
  305 (* PIPE *);
  306 (* CARET *);
  307 (* TILDE *);
  308 (* LT *);
  309 (* GT *);
  310 (* LTEQ *);
  311 (* GTEQ *);
  312 (* DEQ *);
  313 (* NOTEQ *);
  314 (* LPAREN *);
  315 (* RPAREN *);
  316 (* LBRACKET *);
  317 (* RBRACKET *);
  318 (* LBRACE *);
  319 (* RBRACE *);
  320 (* COMMA *);
  321 (* COLON *);
  322 (* DOT *);
  323 (* SEMICOLON *);
  324 (* ATSYM *);
  325 (* EQ *);
  326 (* PLUSEQ *);
  327 (* MINUSEQ *);
  328 (* STAREQ *);
  329 (* SLASHEQ *);
  330 (* DSLASHEQ *);
  331 (* PERCENTEQ *);
  332 (* AMPEQ *);
  333 (* PIPEEQ *);
  334 (* CARETEQ *);
  335 (* DGTEQ *);
  336 (* DLTEQ *);
  337 (* DSTAREQ *);
  338 (* ELLIPSIS *);
    0|]

let yytransl_block = [|
  261 (* INDENT_SPACE *);
  339 (* STRING *);
  340 (* NAME *);
  341 (* NUMBER *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\003\000\004\000\005\000\006\000\
\006\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\007\000\007\000\
\009\000\009\000\010\000\010\000\011\000\011\000\012\000\012\000\
\013\000\013\000\014\000\014\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\016\000\016\000\
\017\000\017\000\018\000\018\000\019\000\019\000\020\000\020\000\
\021\000\021\000\022\000\022\000\022\000\023\000\023\000\024\000\
\024\000\024\000\024\000\025\000\025\000\026\000\026\000\026\000\
\028\000\027\000\027\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\030\000\030\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\001\000\001\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\001\000\
\003\000\001\000\005\000\001\000\003\000\001\000\003\000\001\000\
\002\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\002\000\002\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\001\000\001\000\003\000\003\000\001\000\003\000\001\000\001\000\
\001\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\002\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\002\000\082\000\080\000\081\000\000\000\070\000\
\071\000\000\000\072\000\079\000\084\000\076\000\077\000\085\000\
\000\000\004\000\005\000\006\000\007\000\000\000\000\000\026\000\
\000\000\000\000\032\000\000\000\036\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\000\000\069\000\000\000\073\000\
\000\000\033\000\000\000\001\000\003\000\022\000\010\000\011\000\
\012\000\013\000\021\000\014\000\015\000\016\000\017\000\019\000\
\018\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\043\000\037\000\038\000\041\000\040\000\039\000\042\000\
\000\000\000\000\000\000\000\000\057\000\058\000\000\000\000\000\
\000\000\064\000\065\000\067\000\066\000\000\000\068\000\000\000\
\083\000\008\000\025\000\000\000\000\000\031\000\046\000\044\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\075\000\000\000\027\000"

let yydgoto = "\002\000\
\016\000\017\000\018\000\019\000\020\000\021\000\022\000\059\000\
\023\000\024\000\025\000\026\000\027\000\028\000\073\000\029\000\
\030\000\031\000\032\000\033\000\079\000\034\000\035\000\086\000\
\036\000\037\000\038\000\039\000\040\000\041\000"

let yysindex = "\003\000\
\022\005\000\000\000\000\000\000\000\000\000\000\127\003\000\000\
\000\000\117\004\000\000\000\000\000\000\000\000\000\000\000\000\
\104\005\000\000\000\000\000\000\000\000\005\005\201\254\000\000\
\246\254\251\254\000\000\166\255\000\000\238\254\229\254\240\254\
\231\254\243\254\226\254\000\000\117\004\000\000\248\254\000\000\
\211\254\000\000\238\254\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\127\003\127\003\127\003\127\003\127\003\031\255\
\019\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\209\003\117\004\117\004\117\004\000\000\000\000\117\004\117\004\
\117\004\000\000\000\000\000\000\000\000\117\004\000\000\117\004\
\000\000\000\000\000\000\230\254\251\254\000\000\000\000\000\000\
\000\000\229\254\240\254\231\254\243\254\226\254\226\254\000\000\
\000\000\127\003\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\005\018\005\000\000\
\192\004\202\003\000\000\028\004\000\000\038\003\130\002\222\001\
\150\000\232\000\160\255\000\000\000\000\000\000\252\254\000\000\
\078\255\000\000\120\003\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\148\004\000\000\000\000\000\000\035\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\110\004\000\000\000\000\000\000\
\000\000\212\002\048\002\058\001\140\001\242\255\068\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\041\000\000\000\000\000\000\000\004\000\000\000\
\000\000\204\255\001\000\002\000\250\255\000\000\000\000\010\000\
\075\000\012\000\013\000\014\000\000\000\016\000\205\255\000\000\
\229\255\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 1729
let yytable = "\074\000\
\042\000\074\000\062\000\001\000\074\000\106\000\074\000\091\000\
\060\000\087\000\082\000\074\000\083\000\084\000\085\000\063\000\
\074\000\061\000\062\000\074\000\077\000\078\000\075\000\074\000\
\074\000\080\000\081\000\074\000\102\000\103\000\074\000\076\000\
\074\000\088\000\074\000\074\000\074\000\089\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\107\000\095\000\096\000\
\094\000\045\000\104\000\074\000\105\000\092\000\090\000\093\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
\074\000\078\000\097\000\078\000\043\000\098\000\078\000\099\000\
\078\000\100\000\000\000\000\000\000\000\078\000\101\000\000\000\
\000\000\000\000\078\000\000\000\000\000\078\000\000\000\000\000\
\000\000\078\000\078\000\000\000\000\000\078\000\000\000\000\000\
\000\000\000\000\078\000\000\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\000\000\000\000\
\000\000\000\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\000\000\078\000\078\000\061\000\000\000\061\000\000\000\000\000\
\061\000\000\000\061\000\000\000\000\000\000\000\064\000\061\000\
\000\000\000\000\000\000\000\000\061\000\000\000\000\000\061\000\
\000\000\000\000\000\000\061\000\061\000\065\000\000\000\061\000\
\000\000\000\000\000\000\000\000\061\000\000\000\061\000\061\000\
\000\000\000\000\066\000\000\000\000\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\067\000\068\000\069\000\070\000\071\000\072\000\061\000\
\000\000\000\000\000\000\000\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\059\000\000\000\059\000\
\000\000\000\000\059\000\000\000\059\000\000\000\000\000\000\000\
\000\000\059\000\000\000\000\000\000\000\000\000\059\000\000\000\
\000\000\059\000\000\000\000\000\000\000\059\000\059\000\000\000\
\000\000\059\000\000\000\000\000\000\000\000\000\059\000\000\000\
\059\000\059\000\000\000\000\000\000\000\000\000\000\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\000\000\000\000\000\000\000\000\000\000\
\000\000\059\000\000\000\000\000\000\000\000\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\060\000\
\000\000\060\000\000\000\000\000\060\000\000\000\060\000\000\000\
\000\000\000\000\000\000\060\000\000\000\000\000\000\000\000\000\
\060\000\000\000\000\000\060\000\000\000\000\000\000\000\060\000\
\060\000\000\000\000\000\060\000\000\000\000\000\000\000\000\000\
\060\000\000\000\060\000\060\000\000\000\000\000\000\000\000\000\
\000\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\060\000\000\000\000\000\000\000\000\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\054\000\000\000\054\000\000\000\000\000\054\000\000\000\
\054\000\000\000\000\000\000\000\000\000\054\000\000\000\000\000\
\000\000\000\000\054\000\000\000\000\000\054\000\000\000\000\000\
\000\000\054\000\054\000\000\000\000\000\054\000\000\000\000\000\
\000\000\000\000\054\000\000\000\054\000\054\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000\
\000\000\000\000\000\000\000\000\000\000\054\000\000\000\000\000\
\000\000\000\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\056\000\000\000\056\000\000\000\000\000\
\056\000\000\000\056\000\000\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\000\000\056\000\000\000\000\000\056\000\
\000\000\000\000\000\000\056\000\056\000\000\000\000\000\056\000\
\000\000\000\000\000\000\000\000\056\000\000\000\000\000\000\000\
\056\000\000\000\000\000\000\000\000\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\000\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\053\000\000\000\053\000\
\000\000\000\000\053\000\000\000\053\000\000\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\053\000\000\000\
\000\000\053\000\000\000\000\000\000\000\053\000\053\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\053\000\000\000\
\053\000\053\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\055\000\
\000\000\055\000\000\000\000\000\055\000\000\000\055\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\055\000\000\000\000\000\000\000\055\000\
\055\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\000\000\055\000\000\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\000\000\000\000\000\000\000\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\052\000\000\000\052\000\000\000\000\000\052\000\000\000\
\052\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\052\000\000\000\000\000\052\000\000\000\000\000\
\000\000\052\000\052\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\052\000\000\000\052\000\052\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\000\000\
\000\000\000\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\051\000\000\000\051\000\000\000\000\000\
\051\000\000\000\051\000\000\000\000\000\000\000\000\000\051\000\
\000\000\000\000\000\000\000\000\051\000\000\000\000\000\051\000\
\000\000\000\000\000\000\051\000\051\000\000\000\000\000\051\000\
\000\000\000\000\000\000\000\000\051\000\000\000\051\000\051\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\050\000\000\000\050\000\
\000\000\000\000\050\000\000\000\050\000\000\000\000\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\050\000\000\000\
\000\000\050\000\000\000\000\000\000\000\050\000\050\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\050\000\000\000\
\050\000\050\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\050\000\000\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\000\000\000\000\000\000\000\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\049\000\
\000\000\049\000\000\000\000\000\049\000\000\000\049\000\000\000\
\000\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\049\000\000\000\000\000\049\000\000\000\000\000\000\000\049\000\
\049\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\049\000\000\000\049\000\049\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\000\000\000\000\000\000\000\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\048\000\000\000\048\000\000\000\000\000\048\000\000\000\
\048\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\000\000\048\000\000\000\000\000\048\000\000\000\000\000\
\000\000\048\000\048\000\000\000\000\000\048\000\000\000\000\000\
\000\000\000\000\048\000\000\000\048\000\048\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\047\000\000\000\047\000\000\000\000\000\
\047\000\000\000\047\000\000\000\004\000\000\000\000\000\047\000\
\000\000\005\000\000\000\000\000\047\000\000\000\006\000\047\000\
\000\000\000\000\000\000\047\000\047\000\000\000\007\000\047\000\
\000\000\000\000\000\000\000\000\047\000\000\000\047\000\047\000\
\047\000\000\000\000\000\000\000\000\000\008\000\009\000\010\000\
\000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\011\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\030\000\000\000\030\000\
\012\000\013\000\014\000\015\000\030\000\000\000\004\000\000\000\
\000\000\030\000\000\000\005\000\000\000\000\000\000\000\000\000\
\006\000\030\000\000\000\000\000\000\000\030\000\030\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\030\000\030\000\000\000\000\000\000\000\000\000\008\000\
\009\000\010\000\000\000\000\000\030\000\000\000\000\000\000\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\000\000\
\000\000\030\000\000\000\000\000\000\000\000\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\034\000\
\000\000\034\000\012\000\013\000\014\000\015\000\034\000\000\000\
\045\000\000\000\000\000\034\000\000\000\045\000\000\000\000\000\
\034\000\000\000\045\000\000\000\000\000\000\000\000\000\034\000\
\034\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\034\000\034\000\000\000\000\000\000\000\
\000\000\045\000\045\000\045\000\000\000\000\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\029\000\000\000\029\000\045\000\045\000\045\000\045\000\
\029\000\000\000\004\000\000\000\000\000\029\000\000\000\005\000\
\000\000\000\000\000\000\000\000\006\000\029\000\000\000\000\000\
\000\000\029\000\029\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\029\000\029\000\023\000\
\000\000\000\000\000\000\008\000\009\000\000\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\000\000\000\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\028\000\000\000\028\000\012\000\013\000\
\014\000\015\000\028\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\000\000\028\000\028\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\000\
\000\000\000\000\000\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\024\000\000\000\024\000\
\000\000\003\000\000\000\004\000\024\000\000\000\000\000\000\000\
\005\000\024\000\000\000\000\000\000\000\006\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\024\000\024\000\000\000\008\000\009\000\010\000\000\000\
\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
\011\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\058\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\012\000\
\013\000\014\000\015\000\044\000\000\000\004\000\000\000\009\000\
\000\000\009\000\005\000\000\000\000\000\000\000\009\000\006\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\008\000\009\000\
\010\000\000\000\009\000\009\000\009\000\000\000\000\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\009\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\013\000\014\000\015\000\009\000\009\000\009\000\
\009\000"

let yycheck = "\004\001\
\007\000\006\001\029\001\001\000\009\001\032\001\011\001\060\000\
\064\001\037\000\041\001\016\001\043\001\044\001\045\001\021\001\
\021\001\028\001\029\001\024\001\046\001\047\001\050\001\028\001\
\029\001\039\001\040\001\032\001\080\000\081\000\049\001\048\001\
\037\001\042\001\039\001\040\001\041\001\083\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\106\000\024\001\037\001\
\063\000\017\000\086\000\064\001\088\000\061\000\059\000\062\000\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\084\001\
\085\001\004\001\073\000\006\001\010\000\074\000\009\001\075\000\
\011\001\076\000\255\255\255\255\255\255\016\001\079\000\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\037\001\255\255\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\255\255\
\255\255\255\255\255\255\255\255\255\255\064\001\255\255\255\255\
\255\255\255\255\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\255\255\084\001\085\001\004\001\255\255\006\001\255\255\255\255\
\009\001\255\255\011\001\255\255\255\255\255\255\009\001\016\001\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\028\001\029\001\024\001\255\255\032\001\
\255\255\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\255\255\255\255\037\001\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\052\001\053\001\054\001\055\001\056\001\057\001\064\001\
\255\255\255\255\255\255\255\255\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\004\001\255\255\006\001\
\255\255\255\255\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\016\001\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\028\001\029\001\255\255\
\255\255\032\001\255\255\255\255\255\255\255\255\037\001\255\255\
\039\001\040\001\255\255\255\255\255\255\255\255\255\255\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\255\255\255\255\255\255\255\255\255\255\
\255\255\064\001\255\255\255\255\255\255\255\255\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\079\001\080\001\081\001\082\001\083\001\084\001\085\001\004\001\
\255\255\006\001\255\255\255\255\009\001\255\255\011\001\255\255\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\028\001\
\029\001\255\255\255\255\032\001\255\255\255\255\255\255\255\255\
\037\001\255\255\039\001\040\001\255\255\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001\255\255\255\255\255\255\255\255\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\084\001\
\085\001\004\001\255\255\006\001\255\255\255\255\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\037\001\255\255\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\255\255\
\255\255\255\255\255\255\255\255\255\255\064\001\255\255\255\255\
\255\255\255\255\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\004\001\255\255\006\001\255\255\255\255\
\009\001\255\255\011\001\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\032\001\
\255\255\255\255\255\255\255\255\037\001\255\255\255\255\255\255\
\041\001\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\255\255\255\255\255\255\255\255\255\255\255\255\064\001\
\255\255\255\255\255\255\255\255\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\004\001\255\255\006\001\
\255\255\255\255\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\016\001\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\028\001\029\001\255\255\
\255\255\032\001\255\255\255\255\255\255\255\255\037\001\255\255\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\255\255\255\255\255\255\255\255\255\255\
\255\255\064\001\255\255\255\255\255\255\255\255\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\079\001\080\001\081\001\082\001\083\001\084\001\085\001\004\001\
\255\255\006\001\255\255\255\255\009\001\255\255\011\001\255\255\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\028\001\
\029\001\255\255\255\255\032\001\255\255\255\255\255\255\255\255\
\037\001\255\255\255\255\255\255\041\001\255\255\255\255\255\255\
\255\255\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001\255\255\255\255\255\255\255\255\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\084\001\
\085\001\004\001\255\255\006\001\255\255\255\255\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\037\001\255\255\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\255\255\
\255\255\255\255\255\255\255\255\255\255\064\001\255\255\255\255\
\255\255\255\255\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\004\001\255\255\006\001\255\255\255\255\
\009\001\255\255\011\001\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\255\255\032\001\
\255\255\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\255\255\255\255\255\255\255\255\255\255\255\255\064\001\
\255\255\255\255\255\255\255\255\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\004\001\255\255\006\001\
\255\255\255\255\009\001\255\255\011\001\255\255\255\255\255\255\
\255\255\016\001\255\255\255\255\255\255\255\255\021\001\255\255\
\255\255\024\001\255\255\255\255\255\255\028\001\029\001\255\255\
\255\255\032\001\255\255\255\255\255\255\255\255\037\001\255\255\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\049\001\255\255\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\255\255\255\255\255\255\255\255\255\255\
\255\255\064\001\255\255\255\255\255\255\255\255\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\079\001\080\001\081\001\082\001\083\001\084\001\085\001\004\001\
\255\255\006\001\255\255\255\255\009\001\255\255\011\001\255\255\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\028\001\
\029\001\255\255\255\255\032\001\255\255\255\255\255\255\255\255\
\037\001\255\255\039\001\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\049\001\255\255\051\001\052\001\
\053\001\054\001\055\001\056\001\057\001\255\255\255\255\255\255\
\255\255\255\255\255\255\064\001\255\255\255\255\255\255\255\255\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\084\001\
\085\001\004\001\255\255\006\001\255\255\255\255\009\001\255\255\
\011\001\255\255\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\037\001\255\255\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\255\255\
\255\255\255\255\255\255\255\255\255\255\064\001\255\255\255\255\
\255\255\255\255\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\004\001\255\255\006\001\255\255\255\255\
\009\001\255\255\011\001\255\255\006\001\255\255\255\255\016\001\
\255\255\011\001\255\255\255\255\021\001\255\255\016\001\024\001\
\255\255\255\255\255\255\028\001\029\001\255\255\024\001\032\001\
\255\255\255\255\255\255\255\255\037\001\255\255\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\255\255\255\255\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\051\001\255\255\255\255\255\255\255\255\255\255\064\001\
\255\255\255\255\255\255\255\255\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\004\001\255\255\006\001\
\082\001\083\001\084\001\085\001\011\001\255\255\006\001\255\255\
\255\255\016\001\255\255\011\001\255\255\255\255\255\255\255\255\
\016\001\024\001\255\255\255\255\255\255\028\001\029\001\255\255\
\255\255\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\039\001\
\040\001\041\001\255\255\255\255\051\001\255\255\255\255\255\255\
\255\255\255\255\255\255\051\001\255\255\255\255\255\255\255\255\
\255\255\064\001\255\255\255\255\255\255\255\255\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\079\001\080\001\081\001\082\001\083\001\084\001\085\001\004\001\
\255\255\006\001\082\001\083\001\084\001\085\001\011\001\255\255\
\006\001\255\255\255\255\016\001\255\255\011\001\255\255\255\255\
\021\001\255\255\016\001\255\255\255\255\255\255\255\255\028\001\
\029\001\255\255\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\039\001\040\001\041\001\255\255\255\255\255\255\
\255\255\039\001\040\001\041\001\255\255\255\255\051\001\255\255\
\255\255\255\255\255\255\255\255\255\255\051\001\255\255\255\255\
\255\255\255\255\255\255\064\001\255\255\255\255\255\255\255\255\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\082\001\083\001\084\001\
\085\001\004\001\255\255\006\001\082\001\083\001\084\001\085\001\
\011\001\255\255\006\001\255\255\255\255\016\001\255\255\011\001\
\255\255\255\255\255\255\255\255\016\001\024\001\255\255\255\255\
\255\255\028\001\029\001\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\039\001\040\001\041\001\004\001\
\255\255\255\255\255\255\039\001\040\001\255\255\255\255\255\255\
\051\001\255\255\255\255\255\255\255\255\255\255\255\255\051\001\
\255\255\255\255\255\255\255\255\255\255\064\001\255\255\255\255\
\255\255\255\255\069\001\070\001\071\001\072\001\073\001\074\001\
\075\001\076\001\077\001\078\001\079\001\080\001\081\001\082\001\
\083\001\084\001\085\001\004\001\255\255\006\001\082\001\083\001\
\084\001\085\001\011\001\255\255\255\255\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\069\001\070\001\071\001\072\001\073\001\074\001\075\001\076\001\
\077\001\078\001\079\001\080\001\081\001\255\255\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\051\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\064\001\
\255\255\255\255\255\255\255\255\069\001\070\001\071\001\072\001\
\073\001\074\001\075\001\076\001\077\001\078\001\079\001\080\001\
\081\001\082\001\083\001\084\001\085\001\004\001\255\255\006\001\
\255\255\004\001\255\255\006\001\011\001\255\255\255\255\255\255\
\011\001\016\001\255\255\255\255\255\255\016\001\255\255\255\255\
\255\255\024\001\255\255\255\255\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\039\001\040\001\041\001\255\255\039\001\040\001\041\001\255\255\
\255\255\255\255\255\255\255\255\051\001\255\255\255\255\255\255\
\051\001\069\001\070\001\071\001\072\001\073\001\074\001\075\001\
\076\001\077\001\078\001\079\001\080\001\081\001\069\001\070\001\
\071\001\072\001\073\001\074\001\075\001\076\001\077\001\078\001\
\079\001\080\001\081\001\082\001\083\001\084\001\085\001\082\001\
\083\001\084\001\085\001\004\001\255\255\006\001\255\255\004\001\
\255\255\006\001\011\001\255\255\255\255\255\255\011\001\016\001\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\024\001\
\255\255\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\039\001\040\001\
\041\001\255\255\039\001\040\001\041\001\255\255\255\255\255\255\
\255\255\255\255\051\001\255\255\255\255\255\255\051\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\082\001\083\001\084\001\085\001\082\001\083\001\084\001\
\085\001"

let yynames_const = "\
  NEWLINE\000\
  INDENT\000\
  DEDENT\000\
  ENDMARKER\000\
  FALSE\000\
  CLASS\000\
  FINALLY\000\
  IS\000\
  RETURN\000\
  NONE\000\
  CONTINUE\000\
  FOR\000\
  LAMBDA\000\
  TRY\000\
  TRUE\000\
  DEF\000\
  FROM\000\
  NONLOCAL\000\
  WHILE\000\
  AND\000\
  DEL\000\
  GLOBAL\000\
  NOT\000\
  WITH\000\
  AS\000\
  ELIF\000\
  IF\000\
  OR\000\
  YIELD\000\
  ASSERT\000\
  ELSE\000\
  IMPORT\000\
  PASS\000\
  BREAK\000\
  EXCEPT\000\
  IN\000\
  RAISE\000\
  PLUS\000\
  MINUS\000\
  STAR\000\
  DSTAR\000\
  SLASH\000\
  DSLASH\000\
  PERCENT\000\
  DLT\000\
  DGT\000\
  AMP\000\
  PIPE\000\
  CARET\000\
  TILDE\000\
  LT\000\
  GT\000\
  LTEQ\000\
  GTEQ\000\
  DEQ\000\
  NOTEQ\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  COLON\000\
  DOT\000\
  SEMICOLON\000\
  ATSYM\000\
  EQ\000\
  PLUSEQ\000\
  MINUSEQ\000\
  STAREQ\000\
  SLASHEQ\000\
  DSLASHEQ\000\
  PERCENTEQ\000\
  AMPEQ\000\
  PIPEEQ\000\
  CARETEQ\000\
  DGTEQ\000\
  DLTEQ\000\
  DSTAREQ\000\
  ELLIPSIS\000\
  "

let yynames_block = "\
  INDENT_SPACE\000\
  STRING\000\
  NAME\000\
  NUMBER\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 50 "parser.mly"
                         ( Ast.Program (List.rev _1) )
# 816 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                       ( Ast.Program [] )
# 822 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 53 "parser.mly"
                   ( _2 :: _1 )
# 830 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 54 "parser.mly"
       ([_1])
# 837 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_stmt) in
    Obj.repr(
# 56 "parser.mly"
                  ( Smpl_stmt _1)
# 844 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'small_stmt) in
    Obj.repr(
# 58 "parser.mly"
                        ( Single _1 )
# 851 "parser.ml"
               : 'simple_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_stmt) in
    Obj.repr(
# 60 "parser.mly"
                      ( Expr_stmt _1 )
# 858 "parser.ml"
               : 'small_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'testlist) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'assign_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'testlist) in
    Obj.repr(
# 66 "parser.mly"
                                       (Assignment (_2, _1, _3))
# 867 "parser.ml"
               : 'expr_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'testlist) in
    Obj.repr(
# 67 "parser.mly"
                                  (Expr _1)
# 874 "parser.ml"
               : 'expr_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                        ( Pluseq)
# 880 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
               (Minuseq)
# 886 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
              (Stareq)
# 892 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
               (Slasheq)
# 898 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
                 (Percenteq)
# 904 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
             (Ampeq)
# 910 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
              (Pipeeq)
# 916 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
               (Careteq)
# 922 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
             (Dlteq)
# 928 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
             (Dgteq)
# 934 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
               (Dstareq)
# 940 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "parser.mly"
                (Dslasheq)
# 946 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
                (Eq)
# 952 "parser.ml"
               : 'assign_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'testseq) in
    Obj.repr(
# 83 "parser.mly"
                        ( _1 )
# 959 "parser.ml"
               : 'testlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'testseq) in
    Obj.repr(
# 84 "parser.mly"
          (_1)
# 966 "parser.ml"
               : 'testlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'testseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'test) in
    Obj.repr(
# 86 "parser.mly"
                            ( _3 :: _1 )
# 974 "parser.ml"
               : 'testseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'test) in
    Obj.repr(
# 87 "parser.mly"
                            ( [_1] )
# 981 "parser.ml"
               : 'testseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'or_test) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'or_test) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'test) in
    Obj.repr(
# 89 "parser.mly"
                                   ( If_test (_1, _3, _5))
# 990 "parser.ml"
               : 'test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_test) in
    Obj.repr(
# 90 "parser.mly"
                                   ( Or_test _1)
# 997 "parser.ml"
               : 'test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_test) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_test) in
    Obj.repr(
# 93 "parser.mly"
                             ( let Or(l) = _1 in Or(_3::l) )
# 1005 "parser.ml"
               : 'or_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_test) in
    Obj.repr(
# 94 "parser.mly"
                ( Or[_1] )
# 1012 "parser.ml"
               : 'or_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_test) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'not_test) in
    Obj.repr(
# 96 "parser.mly"
                                (let And(l) = _1 in And(_3::l))
# 1020 "parser.ml"
               : 'and_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'not_test) in
    Obj.repr(
# 97 "parser.mly"
           (And([_1]))
# 1027 "parser.ml"
               : 'and_test))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'not_test) in
    Obj.repr(
# 99 "parser.mly"
                              (Not _2)
# 1034 "parser.ml"
               : 'not_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comparison) in
    Obj.repr(
# 100 "parser.mly"
                                (Comp _1)
# 1041 "parser.ml"
               : 'not_test))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comparison) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'star_expr) in
    Obj.repr(
# 102 "parser.mly"
                                          ( let Cmp_cmp(stexp, l) = _1 in Cmp_cmp(stexp, (_2, _3)::l))
# 1050 "parser.ml"
               : 'comparison))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'star_expr) in
    Obj.repr(
# 103 "parser.mly"
                                          (Cmp_cmp(_1, []))
# 1057 "parser.ml"
               : 'comparison))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "parser.mly"
            (Lt)
# 1063 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
            (Gt)
# 1069 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "parser.mly"
            (Eqeq)
# 1075 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "parser.mly"
            (Gteq)
# 1081 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 111 "parser.mly"
            (Lteq)
# 1087 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "parser.mly"
            (Noteq)
# 1093 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 113 "parser.mly"
            (In)
# 1099 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "parser.mly"
            (Notin)
# 1105 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 115 "parser.mly"
            (Is)
# 1111 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
            (Isnot)
# 1117 "parser.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                       (Sexp_sexp _2)
# 1124 "parser.ml"
               : 'star_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                      (Sexp_exp _1)
# 1131 "parser.ml"
               : 'star_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'xor_expr) in
    Obj.repr(
# 121 "parser.mly"
                            (let Exp(l) = _1 in Exp(_3::l))
# 1139 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'xor_expr) in
    Obj.repr(
# 122 "parser.mly"
                            (Exp([_1]) )
# 1146 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'xor_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 124 "parser.mly"
                                    ( let Xor_exp(l) = _1 in Xor_exp(_3::l))
# 1154 "parser.ml"
               : 'xor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_expr) in
    Obj.repr(
# 125 "parser.mly"
                                    ( Xor_exp([_1]))
# 1161 "parser.ml"
               : 'xor_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expr) in
    Obj.repr(
# 127 "parser.mly"
                                  ( let And_exp(l) = _1 in And_exp(_3::l))
# 1169 "parser.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'shift_expr) in
    Obj.repr(
# 128 "parser.mly"
                                  (And_exp([_1]))
# 1176 "parser.ml"
               : 'and_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'shift_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'shift_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 130 "parser.mly"
                                            (let Shift(a, l) = _1 in Shift(a, (_2,_3)::l))
# 1185 "parser.ml"
               : 'shift_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arith_expr) in
    Obj.repr(
# 131 "parser.mly"
                                            (Shift(_1, []))
# 1192 "parser.ml"
               : 'shift_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 133 "parser.mly"
                    (Dlt)
# 1198 "parser.ml"
               : 'shift_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "parser.mly"
                    (Dgt)
# 1204 "parser.ml"
               : 'shift_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 137 "parser.mly"
                               ( let Arith(t, l) = _1 in Arith(t, (Plus,_3)::l))
# 1212 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arith_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 138 "parser.mly"
                               ( let Arith(t, l) = _1 in Arith(t, (Minus,_3)::l))
# 1220 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 139 "parser.mly"
                             (let Term(f, l) = _1 in Arith(Term(f, List.rev l), []))
# 1227 "parser.ml"
               : 'arith_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'term_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 144 "parser.mly"
                          ( let Term(f, l) = _1 in Term(f, (_2,_3)::l))
# 1236 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 145 "parser.mly"
          ( Term(_1, []))
# 1243 "parser.ml"
               : 'term))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "parser.mly"
               (Star)
# 1249 "parser.ml"
               : 'term_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 148 "parser.mly"
                (Fslash)
# 1255 "parser.ml"
               : 'term_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 149 "parser.mly"
                (Percent)
# 1261 "parser.ml"
               : 'term_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "parser.mly"
                (Dfslash)
# 1267 "parser.ml"
               : 'term_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'factor_op) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 152 "parser.mly"
                         ( Uapp (_1, _2) )
# 1275 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'power) in
    Obj.repr(
# 153 "parser.mly"
                         ( Power _1)
# 1282 "parser.ml"
               : 'factor))
; (fun __caml_parser_env ->
    Obj.repr(
# 155 "parser.mly"
                ( Uplus )
# 1288 "parser.ml"
               : 'factor_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "parser.mly"
         ( Uminus )
# 1294 "parser.ml"
               : 'factor_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "parser.mly"
         ( Utilde)
# 1300 "parser.ml"
               : 'factor_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atom) in
    Obj.repr(
# 162 "parser.mly"
     ( IndAtom (_1, []))
# 1307 "parser.ml"
               : 'indexed))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'indexed) in
    Obj.repr(
# 174 "parser.mly"
                (Pow_index _1 )
# 1314 "parser.ml"
               : 'power))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'indexed) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factor) in
    Obj.repr(
# 175 "parser.mly"
                       ( Pow_factor (_1, _3))
# 1322 "parser.ml"
               : 'power))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 186 "parser.mly"
               (Ast.Name _1)
# 1329 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 187 "parser.mly"
                ( Ast.Number _1)
# 1336 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'strings) in
    Obj.repr(
# 188 "parser.mly"
               ( Ast.String _1)
# 1343 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "parser.mly"
                ( Ast.Ellipsis)
# 1349 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "parser.mly"
                (Ast.None)
# 1355 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "parser.mly"
                ( Ast.True)
# 1361 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "parser.mly"
                ( Ast.False)
# 1367 "parser.ml"
               : 'atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'strings) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 194 "parser.mly"
                        ( _1 ^ _2 )
# 1375 "parser.ml"
               : 'strings))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 195 "parser.mly"
          ( _1 )
# 1382 "parser.ml"
               : 'strings))
(* Entry start *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let start (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
