# 9 "first_pass.mll"
 

    exception End_of_file
    exception Lex_Error of string


    let emit_c arg =
        print_char arg

    let emit_s arg =
        print_string arg

    let num_square = ref 0
    let num_brace = ref 0
    let num_paren = ref 0

    let inc pt =
        pt := !pt + 1

    let dec pt =
        pt := !pt - 1;
        if !pt < 0 then raise (Lex_Error "Unbalanced thingies")

    let process_left = function
        | '[' -> inc num_square
        | '{' -> inc num_brace
        | '(' -> inc num_paren
        | _ -> raise (Lex_Error "Unrecognized opener")

    let process_right = function
        | ']' -> (*print_string "Saw ]\n";*) dec num_square
        | '}' -> (*print_string "Saw }\n"; *)dec num_brace
        | ')' -> (*print_string "Saw )\n"; *) dec num_paren
        | _ -> raise (Lex_Error "Unrecognized opener")

    let can_continue () = 
        (!num_square > 0) || (!num_paren > 0) || (!num_brace > 0)

# 41 "first_pass.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\250\255\251\255\252\255\253\255\002\000\003\000\255\255\
    \001\000\011\000\004\000\015\000\005\000\006\000\009\000\010\000\
    \254\255\012\000\013\000\014\000\015\000\016\000\017\000\018\000\
    \003\000\024\000\025\000\026\000\027\000\028\000\029\000\030\000\
    \032\000\031\000\033\000\072\000\248\255\249\255\034\000\035\000\
    \251\255\252\255\003\000\254\255\005\000\253\255\030\000\036\000\
    \037\000\038\000\250\255\039\000\040\000\041\000\042\000\044\000\
    \045\000\046\000\004\000\052\000\053\000\054\000\055\000\056\000\
    \058\000\062\000\063\000\065\000\066\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\004\000\004\000\255\255\
    \004\000\004\000\255\255\255\255\001\000\255\255\255\255\001\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\000\
    \001\000\255\255\255\255\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\001\000\255\255\255\255\255\255\006\000\006\000\
    \255\255\255\255\006\000\255\255\000\000\255\255\005\000\255\255\
    \255\255\005\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\005\000\005\000\255\255\255\255\005\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\005\000";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\000\000\000\000\025\000\013\000\000\000\
    \010\000\255\255\010\000\255\255\255\255\013\000\013\000\013\000\
    \000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \255\255\025\000\025\000\025\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\037\000\000\000\000\000\059\000\047\000\
    \000\000\000\000\255\255\000\000\044\000\000\000\255\255\047\000\
    \047\000\047\000\000\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\255\255\059\000\059\000\059\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\007\000\007\000\009\000\045\000\007\000\255\255\
    \000\000\000\000\000\000\000\000\011\000\007\000\000\000\011\000\
    \011\000\007\000\000\000\011\000\000\000\000\000\000\000\000\000\
    \009\000\000\000\005\000\008\000\024\000\028\000\062\000\006\000\
    \004\000\003\000\012\000\011\000\017\000\016\000\010\000\011\000\
    \015\000\016\000\010\000\019\000\021\000\020\000\016\000\022\000\
    \023\000\016\000\016\000\027\000\016\000\030\000\032\000\031\000\
    \016\000\034\000\033\000\016\000\058\000\051\000\000\000\000\000\
    \000\000\000\000\046\000\050\000\049\000\050\000\053\000\055\000\
    \054\000\050\000\043\000\056\000\057\000\050\000\050\000\061\000\
    \050\000\064\000\066\000\004\000\065\000\003\000\026\000\014\000\
    \050\000\067\000\014\000\068\000\050\000\014\000\014\000\000\000\
    \018\000\018\000\038\000\044\000\018\000\000\000\000\000\039\000\
    \041\000\040\000\000\000\000\000\026\000\026\000\026\000\029\000\
    \029\000\000\000\000\000\004\000\029\000\003\000\060\000\048\000\
    \048\000\048\000\048\000\052\000\052\000\000\000\000\000\000\000\
    \052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \060\000\060\000\060\000\063\000\063\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\063\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\041\000\042\000\040\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\041\000\000\000\040\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \036\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\008\000\000\000\042\000\010\000\044\000\
    \255\255\255\255\255\255\255\255\009\000\009\000\255\255\009\000\
    \011\000\011\000\255\255\011\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\005\000\024\000\058\000\000\000\
    \000\000\000\000\006\000\009\000\012\000\013\000\009\000\011\000\
    \014\000\015\000\011\000\017\000\018\000\019\000\020\000\021\000\
    \022\000\023\000\025\000\026\000\027\000\028\000\029\000\030\000\
    \031\000\033\000\032\000\034\000\038\000\046\000\255\255\255\255\
    \255\255\255\255\039\000\047\000\048\000\049\000\051\000\052\000\
    \053\000\054\000\035\000\055\000\056\000\057\000\059\000\060\000\
    \061\000\062\000\063\000\000\000\064\000\000\000\005\000\006\000\
    \065\000\066\000\013\000\067\000\068\000\014\000\015\000\255\255\
    \017\000\018\000\035\000\035\000\021\000\255\255\255\255\035\000\
    \035\000\035\000\255\255\255\255\025\000\026\000\027\000\028\000\
    \029\000\255\255\255\255\000\000\032\000\000\000\038\000\039\000\
    \047\000\048\000\049\000\051\000\052\000\255\255\255\255\255\255\
    \055\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \059\000\060\000\061\000\062\000\063\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\066\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\035\000\035\000\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\035\000\255\255\035\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\008\000\005\000\006\000\010\000\044\000\013\000\255\255\
    \255\255\014\000\015\000\255\255\017\000\018\000\019\000\020\000\
    \021\000\022\000\023\000\255\255\255\255\255\255\255\255\255\255\
    \025\000\026\000\027\000\028\000\029\000\030\000\031\000\033\000\
    \032\000\034\000\038\000\039\000\047\000\048\000\049\000\051\000\
    \052\000\053\000\054\000\255\255\055\000\056\000\057\000\255\255\
    \255\255\255\255\255\255\255\255\059\000\060\000\061\000\062\000\
    \063\000\255\255\064\000\255\255\255\255\255\255\065\000\066\000\
    \255\255\067\000\068\000\255\255\255\255\255\255\255\255\255\255\
    \035\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec start_line lexbuf =
    __ocaml_lex_start_line_rec lexbuf 0
and __ocaml_lex_start_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 66 "first_pass.mll"
                                      ( start_line lexbuf)
# 180 "first_pass.ml"

  | 1 ->
let
# 67 "first_pass.mll"
             s
# 186 "first_pass.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 67 "first_pass.mll"
                                   ( emit_s s; in_line lexbuf)
# 190 "first_pass.ml"

  | 2 ->
let
# 68 "first_pass.mll"
          l
# 196 "first_pass.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 68 "first_pass.mll"
                                      ( emit_c l; process_left l; in_line lexbuf)
# 200 "first_pass.ml"

  | 3 ->
let
# 69 "first_pass.mll"
           r
# 206 "first_pass.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 69 "first_pass.mll"
                                      ( emit_c r; process_right r; in_line lexbuf)
# 210 "first_pass.ml"

  | 4 ->
# 70 "first_pass.mll"
                                      ( emit_s (Lexing.lexeme lexbuf); in_line lexbuf)
# 215 "first_pass.ml"

  | 5 ->
# 71 "first_pass.mll"
                                      ( raise End_of_file)
# 220 "first_pass.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_start_line_rec lexbuf __ocaml_lex_state

and in_line lexbuf =
    __ocaml_lex_in_line_rec lexbuf 35
and __ocaml_lex_in_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 74 "first_pass.mll"
                                      ( in_line lexbuf)
# 231 "first_pass.ml"

  | 1 ->
# 75 "first_pass.mll"
                              ( if can_continue ()
        then in_line lexbuf
        else 
            begin
                emit_c '\n';
                start_line lexbuf
            end )
# 242 "first_pass.ml"

  | 2 ->
# 82 "first_pass.mll"
                                      ( in_line lexbuf)
# 247 "first_pass.ml"

  | 3 ->
let
# 83 "first_pass.mll"
          l
# 253 "first_pass.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 83 "first_pass.mll"
                                      ( emit_c l; process_left l; in_line lexbuf)
# 257 "first_pass.ml"

  | 4 ->
let
# 84 "first_pass.mll"
           r
# 263 "first_pass.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 84 "first_pass.mll"
                                      ( emit_c r; process_right r; in_line lexbuf)
# 267 "first_pass.ml"

  | 5 ->
let
# 85 "first_pass.mll"
             s
# 273 "first_pass.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 85 "first_pass.mll"
                                 ( emit_s s; in_line lexbuf)
# 277 "first_pass.ml"

  | 6 ->
# 86 "first_pass.mll"
                                      ( emit_s (Lexing.lexeme lexbuf); in_line lexbuf)
# 282 "first_pass.ml"

  | 7 ->
# 87 "first_pass.mll"
                                      ( raise End_of_file)
# 287 "first_pass.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_in_line_rec lexbuf __ocaml_lex_state

;;

# 89 "first_pass.mll"
 
let rec parse lexbuf =
    let token = start_line lexbuf
    in
    (* do * nothing * in * this * example * *)
    parse lexbuf

let main () =
    let cin = 
        if Array.length Sys.argv > 1 then open_in Sys.argv.(1)
        else stdin in
    let lexbuf = Lexing.from_channel cin in
    try parse lexbuf
    with End_of_file -> ()

let _ = print_string "Beginning to parse...\n"
let _ = Printexc.print main ()
let _ = Printf.printf "Finished Parsing\n"

# 313 "first_pass.ml"
