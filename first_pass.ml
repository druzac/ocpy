# 3 "first_pass.mll"
 

    exception End_of_file
    exception Lex_Error of string

    let emit_c arg =
        print_char arg

    let emit_s arg =
        print_string arg

# 14 "first_pass.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\252\255\253\255\002\000\255\255\001\000\005\000\003\000\
    \009\000\254\255\004\000\005\000\008\000\012\000\251\255\009\000\
    \006\000\254\255\010\000\255\255\013\000\253\255\252\255\011\000\
    \014\000\015\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\002\000\255\255\002\000\002\000\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255\255\255\004\000\
    \004\000\255\255\004\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\003\000";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\010\000\000\000\007\000\255\255\007\000\
    \255\255\000\000\010\000\010\000\010\000\014\000\000\000\023\000\
    \255\255\000\000\020\000\000\000\020\000\000\000\000\000\023\000\
    \023\000\023\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\006\000\004\000\004\000\006\000\004\000\008\000\004\000\
    \021\000\008\000\008\000\004\000\019\000\008\000\017\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \006\000\000\000\003\000\005\000\009\000\008\000\009\000\012\000\
    \007\000\008\000\009\000\022\000\007\000\022\000\015\000\018\000\
    \025\000\022\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
    \011\000\011\000\000\000\000\000\011\000\024\000\000\000\024\000\
    \016\000\000\000\024\000\024\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\005\000\000\000\007\000\006\000\006\000\
    \016\000\006\000\008\000\008\000\018\000\008\000\013\000\020\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\003\000\006\000\010\000\011\000\
    \006\000\008\000\012\000\015\000\008\000\023\000\013\000\013\000\
    \024\000\025\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\255\255\
    \010\000\011\000\255\255\255\255\012\000\015\000\255\255\023\000\
    \013\000\255\255\024\000\025\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\005\000\003\000\007\000\010\000\011\000\255\255\255\255\
    \012\000\015\000\018\000\023\000\013\000\020\000\024\000\025\000\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec start_line lexbuf =
    __ocaml_lex_start_line_rec lexbuf 0
and __ocaml_lex_start_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 24 "first_pass.mll"
                                      ( start_line lexbuf)
# 124 "first_pass.ml"

  | 1 ->
let
# 25 "first_pass.mll"
                s
# 130 "first_pass.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 25 "first_pass.mll"
                                    ( emit_s s; in_line lexbuf)
# 134 "first_pass.ml"

  | 2 ->
# 26 "first_pass.mll"
                                      ( emit_s (Lexing.lexeme lexbuf); in_line lexbuf)
# 139 "first_pass.ml"

  | 3 ->
# 30 "first_pass.mll"
                                      ( raise End_of_file)
# 144 "first_pass.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_start_line_rec lexbuf __ocaml_lex_state

and in_line lexbuf =
    __ocaml_lex_in_line_rec lexbuf 13
and __ocaml_lex_in_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 33 "first_pass.mll"
                                      ( emit_c '\n'; start_line lexbuf)
# 155 "first_pass.ml"

  | 1 ->
# 34 "first_pass.mll"
                                      ( emit_c '\n'; start_line lexbuf)
# 160 "first_pass.ml"

  | 2 ->
# 35 "first_pass.mll"
                                      ( in_line lexbuf)
# 165 "first_pass.ml"

  | 3 ->
let
# 36 "first_pass.mll"
                s
# 171 "first_pass.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 36 "first_pass.mll"
                                    ( emit_s s; in_line lexbuf)
# 175 "first_pass.ml"

  | 4 ->
# 37 "first_pass.mll"
                                      ( emit_s (Lexing.lexeme lexbuf); in_line lexbuf)
# 180 "first_pass.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_in_line_rec lexbuf __ocaml_lex_state

;;

# 59 "first_pass.mll"
 
let rec parse lexbuf =
    let token = start_line lexbuf
    in
    (* do * nothing * in * this * example * *)
    parse lexbuf

let main () =
    let cin = 
        if Array.length Sys.argv > 1 then open_in Sys.argv.(1)
        else stdin in
    let lexbuf = Lexing.from_channel cin in
    try parse lexbuf
    with End_of_file -> ()

let _ = print_string "Beginning to parse...\n"
let _ = Printexc.print main ()
let _ = Printf.printf "Finished Parsing"

# 206 "first_pass.ml"
