# 8 "tokenize.mll"
 

    exception Indent_Error
    exception End_of_file
    exception Lex_Error of string

    let emit_s s =
        print_string s;
        print_newline ()

    let emit_c arg =
        print_char arg

    let indent_stack = ref [0]
    let push num = 
        indent_stack := num::!indent_stack

    let pop () =
        indent_stack := List.tl !indent_stack

    let peek () =
        List.hd !indent_stack

    type token = 
        | INDENT 
        | NEWLINE
        | DEDENT
        | ENDMARKER
        | ID of string
        | LIT of string
        | KEYWORD of string
        | PUNCT of string

    let keyword_map = List.map (fun kwd -> kwd, KEYWORD kwd)
    [ "False"; "class";     "finally";    "is";         "return";
    "None";       "continue";   "for";        "lambda";     "try";
    "True";       "def";        "from";       "nonlocal";   "while";
    "and";        "del";        "global";     "not";        "with";
    "as";         "elif";       "if";         "or";         "yield";
    "assert";     "else";       "import";     "pass";
    "break";      "except";     "in";         "raise"]

    let string_rev s =
        let len = String.length s in
        let new_s = String.create len in
        let rec iter count = 
            if count >= len then new_s
            else 
                begin
                    new_s.[count] <- s.[len - count - 1];
                    iter (count + 1)
                end
        in
        iter 0

                    

    let emit_token = function
        | INDENT -> emit_s "(INDENT)"
        | NEWLINE -> emit_s "(NEWLINE)"
        | DEDENT -> emit_s "(DEDENT)"
        | ENDMARKER -> emit_s "(ENDMARKER)"
        | ID name -> emit_s ("(ID \"" ^ name ^ "\")")
        | LIT symbol -> emit_s ("(LIT " ^ symbol ^ ")")
        | KEYWORD word -> emit_s ("(KEYWORD "^ word^ ")")
        | PUNCT sym -> emit_s ("(PUNCT \"" ^ sym^ "\")")

    let string_of_char c =
        String.make 1 c

    let rec process_indent s_len =
        let top_stack = (peek ()) in

        let rec pop_all_greater () =
            let curr = peek () in
            if curr < s_len then raise Indent_Error
            else if curr > s_len then
                begin
                    pop ();
                    emit_token DEDENT;
                    pop_all_greater ()
                end
            else 
                ()
            in
            if s_len = top_stack then
                ()
            else if s_len > top_stack then
                begin
                    emit_token INDENT;
                    push s_len
                end
            else
                pop_all_greater ()


        let dedent_remaining () =
            process_indent 0


# 103 "tokenize.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\253\255\001\000\255\255\004\000\248\255\000\000\000\000\
    \251\255\006\000\035\000\039\000\070\000\071\000\072\000\075\000\
    \076\000\091\000\097\000\079\000\080\000\094\000\169\000\181\000\
    \215\000\254\255\008\000\253\255\032\001\042\001\105\000\052\001\
    \191\000\225\000\107\001\107\000\136\001\075\001\096\000\124\000\
    \125\000\126\000\149\000\249\255\001\000\218\000\252\255\253\255\
    \254\255\255\255\022\001\252\255\253\255\254\255\156\000\208\000\
    \209\000\255\255\215\000\201\001\253\255\254\255\018\002\085\001\
    \255\255\146\001\041\002";
  Lexing.lex_backtrk = 
   "\001\000\255\255\001\000\255\255\000\000\255\255\005\000\005\000\
    \255\255\007\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\003\000\004\000\002\000\
    \002\000\255\255\000\000\255\255\255\255\002\000\255\255\255\255\
    \255\255\002\000\002\000\002\000\002\000\255\255\004\000\004\000\
    \004\000\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\000\000\
    \255\255\000\000\255\255";
  Lexing.lex_default = 
   "\255\255\000\000\255\255\000\000\005\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\046\000\000\000\000\000\
    \000\000\000\000\051\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\255\255\060\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\003\000\026\000\025\000\000\000\
    \026\000\026\000\000\000\000\000\026\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\002\000\044\000\043\000\026\000\009\000\006\000\042\000\
    \026\000\016\000\013\000\007\000\008\000\008\000\018\000\020\000\
    \008\000\019\000\022\000\017\000\024\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\008\000\008\000\
    \015\000\010\000\014\000\008\000\008\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\008\000\
    \008\000\008\000\011\000\021\000\008\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\008\000\
    \012\000\008\000\008\000\008\000\008\000\008\000\041\000\040\000\
    \008\000\008\000\039\000\038\000\008\000\008\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \008\000\035\000\035\000\035\000\035\000\008\000\008\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\008\000\008\000\008\000\043\000\021\000\058\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\048\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\056\000\
    \057\000\057\000\028\000\000\000\049\000\000\000\000\000\027\000\
    \001\000\049\000\000\000\000\000\255\255\029\000\000\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\030\000\028\000\000\000\028\000\000\000\000\000\027\000\
    \052\000\027\000\000\000\000\000\000\000\000\000\032\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\000\
    \054\000\030\000\000\000\000\000\028\000\055\000\000\000\000\000\
    \000\000\027\000\000\000\000\000\000\000\000\000\032\000\000\000\
    \000\000\000\000\000\000\037\000\000\000\037\000\000\000\031\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\000\000\028\000\
    \000\000\000\000\053\000\000\000\027\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\028\000\
    \000\000\000\000\000\000\000\000\027\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\027\000\061\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
    \064\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\064\000\000\000\000\000\
    \000\000\000\000\064\000\064\000\000\000\000\000\000\000\064\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
    \000\000\000\000\000\000\064\000\000\000\064\000\000\000\064\000\
    \000\000\062\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \000\000\000\000\000\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\004\000\004\000\255\255\
    \004\000\026\000\255\255\255\255\026\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\002\000\006\000\044\000\004\000\004\000\004\000\007\000\
    \026\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\009\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \010\000\004\000\004\000\004\000\011\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\012\000\013\000\014\000\014\000\015\000\
    \015\000\016\000\017\000\018\000\019\000\020\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \017\000\030\000\030\000\035\000\035\000\038\000\018\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\039\000\040\000\041\000\042\000\021\000\054\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\023\000\045\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\055\000\
    \056\000\058\000\023\000\255\255\045\000\255\255\255\255\023\000\
    \000\000\045\000\255\255\255\255\004\000\024\000\255\255\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\024\000\023\000\255\255\024\000\255\255\255\255\023\000\
    \050\000\024\000\255\255\255\255\255\255\255\255\024\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\045\000\255\255\
    \050\000\024\000\255\255\255\255\024\000\050\000\255\255\255\255\
    \255\255\024\000\255\255\255\255\255\255\255\255\024\000\255\255\
    \255\255\255\255\255\255\028\000\255\255\028\000\255\255\024\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\255\255\029\000\
    \255\255\255\255\050\000\255\255\029\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\029\000\
    \255\255\255\255\255\255\255\255\029\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\034\000\034\000\034\000\034\000\
    \034\000\034\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\036\000\059\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\045\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\059\000\255\255\255\255\255\255\255\255\
    \059\000\255\255\036\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\050\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\059\000\255\255\255\255\
    \255\255\255\255\059\000\059\000\255\255\255\255\255\255\059\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\059\000\
    \255\255\255\255\255\255\059\000\255\255\059\000\255\255\059\000\
    \255\255\059\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\062\000\062\000\062\000\062\000\062\000\
    \062\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\066\000\066\000\066\000\066\000\066\000\066\000\
    \255\255\255\255\255\255\062\000\062\000\062\000\062\000\062\000\
    \062\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\066\000\066\000\066\000\066\000\066\000\066\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\059\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec line_start lexbuf =
    __ocaml_lex_line_start_rec lexbuf 0
and __ocaml_lex_line_start_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 152 "tokenize.mll"
                    ( line_start lexbuf)
# 362 "tokenize.ml"

  | 1 ->
let
# 153 "tokenize.mll"
                  s
# 368 "tokenize.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 153 "tokenize.mll"
                     ( process_indent (String.length s); line_middle lexbuf )
# 372 "tokenize.ml"

  | 2 ->
# 154 "tokenize.mll"
                    ( dedent_remaining (); emit_token ENDMARKER ; raise End_of_file)
# 377 "tokenize.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_line_start_rec lexbuf __ocaml_lex_state

and line_middle lexbuf =
    __ocaml_lex_line_middle_rec lexbuf 4
and __ocaml_lex_line_middle_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 158 "tokenize.mll"
                     ( line_middle lexbuf )
# 388 "tokenize.ml"

  | 1 ->
# 159 "tokenize.mll"
                    ( emit_token NEWLINE; line_start lexbuf)
# 393 "tokenize.ml"

  | 2 ->
let
# 160 "tokenize.mll"
             num
# 399 "tokenize.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 160 "tokenize.mll"
                    ( emit_token (LIT num); line_middle lexbuf)
# 403 "tokenize.ml"

  | 3 ->
let
# 161 "tokenize.mll"
                id
# 409 "tokenize.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 161 "tokenize.mll"
                    ( begin
                      try
                        emit_token (List.assoc id keyword_map) 
                      with
                      Not_found -> emit_token (ID id)
                      end;
                      line_middle lexbuf)
# 419 "tokenize.ml"

  | 4 ->
let
# 168 "tokenize.mll"
           p
# 425 "tokenize.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 168 "tokenize.mll"
                    ( emit_token (PUNCT p); line_middle lexbuf)
# 429 "tokenize.ml"

  | 5 ->
let
# 169 "tokenize.mll"
                   quote
# 435 "tokenize.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 169 "tokenize.mll"
                         ( sstring quote "\"" lexbuf)
# 439 "tokenize.ml"

  | 6 ->
let
# 170 "tokenize.mll"
                   quotes
# 445 "tokenize.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 170 "tokenize.mll"
                          ( lstring quotes.[0] "\"" lexbuf)
# 449 "tokenize.ml"

  | 7 ->
let
# 171 "tokenize.mll"
       c
# 455 "tokenize.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 171 "tokenize.mll"
                          ( raise (Lex_Error ("Unexpected character "^ (string_of_char c))))
# 459 "tokenize.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_line_middle_rec lexbuf __ocaml_lex_state

and sstring delim rev_accum lexbuf =
    __ocaml_lex_sstring_rec delim rev_accum lexbuf 45
and __ocaml_lex_sstring_rec delim rev_accum lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 175 "tokenize.mll"
                   quote
# 471 "tokenize.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 175 "tokenize.mll"
                           ( if quote = delim then (* for now just return str*)
    begin
    emit_token (LIT (string_rev("\""^rev_accum)));
    line_middle lexbuf
    end
            else sstring delim ((string_of_char quote)^rev_accum) lexbuf )
# 480 "tokenize.ml"

  | 1 ->
# 181 "tokenize.mll"
                            ( raise (Lex_Error "EOL while scanning string") )
# 485 "tokenize.ml"

  | 2 ->
# 182 "tokenize.mll"
                           ( escape sstring delim rev_accum lexbuf )
# 490 "tokenize.ml"

  | 3 ->
let
# 183 "tokenize.mll"
       c
# 496 "tokenize.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 183 "tokenize.mll"
                           ( sstring delim ((string_of_char c)^rev_accum) lexbuf)
# 500 "tokenize.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_sstring_rec delim rev_accum lexbuf __ocaml_lex_state

and lstring quote rev_accum lexbuf =
    __ocaml_lex_lstring_rec quote rev_accum lexbuf 50
and __ocaml_lex_lstring_rec quote rev_accum lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 187 "tokenize.mll"
                   quotes
# 512 "tokenize.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 188 "tokenize.mll"
                           ( if quotes.[0] = quote then 
                               begin
                                   emit_token (LIT (string_rev("\""^rev_accum)));
                                   line_middle lexbuf
                               end
                           else lstring quote (quotes^rev_accum) lexbuf )
# 521 "tokenize.ml"

  | 1 ->
# 194 "tokenize.mll"
                           ( escape lstring quote rev_accum lexbuf )
# 526 "tokenize.ml"

  | 2 ->
# 195 "tokenize.mll"
                           ( lstring quote ("n\\" ^ rev_accum) lexbuf )
# 531 "tokenize.ml"

  | 3 ->
let
# 196 "tokenize.mll"
       c
# 537 "tokenize.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 196 "tokenize.mll"
                           ( lstring quote ((string_of_char c)^rev_accum) lexbuf)
# 541 "tokenize.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_lstring_rec quote rev_accum lexbuf __ocaml_lex_state

and escape string_rule quote_type rev_accum lexbuf =
    __ocaml_lex_escape_rec string_rule quote_type rev_accum lexbuf 59
and __ocaml_lex_escape_rec string_rule quote_type rev_accum lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 214 "tokenize.mll"
                        es
# 553 "tokenize.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 214 "tokenize.mll"
                                     ( string_rule quote_type
        ((string_rev("\\"^es))^rev_accum) lexbuf)
# 558 "tokenize.ml"

  | 1 ->
# 216 "tokenize.mll"
                                     ( string_rule quote_type rev_accum lexbuf)
# 563 "tokenize.ml"

  | 2 ->
let
# 217 "tokenize.mll"
               c
# 569 "tokenize.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 217 "tokenize.mll"
                                     ( string_rule quote_type 
                                        ((string_of_char c)^"\\\\"^rev_accum) lexbuf)
# 574 "tokenize.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_escape_rec string_rule quote_type rev_accum lexbuf __ocaml_lex_state

;;

# 222 "tokenize.mll"
 
let rec parse lexbuf =
    let token = line_start lexbuf
    in
    (* do * nothing * in * this * example * *)
    parse lexbuf; token

let main () =
    let cin = 
        if Array.length Sys.argv > 1 then open_in Sys.argv.(1)
        else stdin in
    let lexbuf = Lexing.from_channel cin in
    try parse lexbuf
    with End_of_file -> ()

let _ = Printexc.print main ()

# 598 "tokenize.ml"
