# 11 "lexer.mll"
 

    exception Indent_Error
    exception End_of_file
    exception Lex_Error of string

    open Parser

    let keyword_map =
        [ "False", FALSE;
        "class",CLASS;
        "finally",FINALLY;
        "is",IS;
        "return",RETURN;
        "None",NONE;
        "continue",CONTINUE;
        "for",FOR;
        "lambda",LAMBDA;
        "try",TRY;
        "True",TRUE;
        "def",DEF;
        "from",FROM;
        "nonlocal",NONLOCAL;
        "while",WHILE;
        "and",AND;
        "del",DEL;
        "global",GLOBAL;
        "not",NOT;
        "with",WITH;
        "as",AS;
        "elif",ELIF;
        "if",IF;
        "or",OR;
        "yield",YIELD;
        "assert",ASSERT;
        "else",ELSE;
        "import",IMPORT;
        "pass",PASS;
        "break",BREAK;
        "except",EXCEPT;
        "in",IN;
        "raise", RAISE]

    let punct_map = 
        [ "+", PLUS;
        "-", MINUS;
        "*", STAR;
        "**", DSTAR;
        "/", SLASH;
        "//", DSLASH;
        "%", PERCENT;
        "<<", DLT;
        ">>", DGT;
        "&", AMP;
        "|", PIPE;
        "^", CARET;
        "~", TILDE;
        "<", LT;
        ">", GT;
        "<=", LTEQ;
        ">=", GTEQ;
        "==", DEQ;
        "!=", NOTEQ ;
        "(", LPAREN;
        ")", RPAREN;
        "[", LBRACKET;
        "]", RBRACKET;
        "{", LBRACE;
        "}", RBRACE;
        ",", COMMA;
        ":", COLON;
        ".", DOT;
        ";", SEMICOLON;
        "@", ATSYM;
        "=", EQ;
        "+=", PLUSEQ;
        "-=", MINUSEQ;
        "*=", STAREQ;
        "/=", SLASHEQ;
        "//=", DSLASHEQ;
        "%=", PERCENTEQ;
        "&=", AMPEQ;
        "|=", PIPEEQ;
        "^=", CARETEQ;
        ">>=", DGTEQ;
        "<<=", DLTEQ;
        "**=", DSTAREQ;
        "...", ELLIPSIS]


    let lookup_keyword s =
        List.assoc s keyword_map

    let lookup_punct s =
        List.assoc s punct_map

# 99 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\252\255\255\255\001\000\004\000\008\000\012\000\016\000\
    \248\255\078\000\104\000\250\255\018\000\083\000\084\000\085\000\
    \086\000\087\000\090\000\091\000\106\000\112\000\094\000\095\000\
    \132\000\212\000\225\000\000\001\253\255\005\000\159\000\254\255\
    \252\255\073\001\083\001\003\000\093\001\109\000\235\000\148\001\
    \117\000\177\001\116\001\000\000\108\000\111\000\113\000\114\000\
    \002\000\253\000\254\000\000\001\249\255\001\001\002\001\003\000\
    \151\000\003\001\153\000\154\000\000\000\236\000\010\001\011\001\
    \013\001\025\001\221\000\024\001\063\001\026\001\028\001";
  Lexing.lex_backtrk = 
   "\002\000\255\255\255\255\255\255\255\255\002\000\001\000\000\000\
    \255\255\007\000\007\000\255\255\007\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \004\000\005\000\003\000\003\000\255\255\007\000\000\000\255\255\
    \255\255\255\255\003\000\255\255\255\255\255\255\003\000\003\000\
    \003\000\003\000\255\255\255\255\005\000\005\000\005\000\005\000\
    \006\000\255\255\255\255\006\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\006\000\006\000\255\255\255\255\006\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\006\000";
  Lexing.lex_default = 
   "\255\255\000\000\000\000\003\000\255\255\255\255\255\255\008\000\
    \000\000\061\000\049\000\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\049\000\049\000\049\000\000\000\053\000\053\000\053\000\
    \053\000\053\000\053\000\053\000\255\255\061\000\061\000\061\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\002\000\002\000\006\000\004\000\002\000\031\000\
    \004\000\004\000\002\000\000\000\004\000\004\000\002\000\000\000\
    \004\000\030\000\028\000\000\000\030\000\000\000\000\000\000\000\
    \005\000\000\000\064\000\003\000\004\000\000\000\000\000\003\000\
    \005\000\053\000\056\000\003\000\004\000\000\000\011\000\003\000\
    \030\000\012\000\009\000\040\000\040\000\019\000\016\000\010\000\
    \011\000\011\000\021\000\023\000\011\000\022\000\025\000\020\000\
    \027\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\011\000\011\000\018\000\013\000\017\000\011\000\
    \011\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\011\000\029\000\011\000\014\000\024\000\
    \060\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\011\000\015\000\011\000\011\000\048\000\
    \011\000\011\000\011\000\011\000\011\000\047\000\046\000\011\000\
    \011\000\045\000\044\000\011\000\011\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\040\000\040\000\011\000\
    \030\000\011\000\062\000\030\000\011\000\011\000\011\000\011\000\
    \000\000\000\000\000\000\000\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\052\000\030\000\
    \059\000\052\000\000\000\000\000\050\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\000\000\
    \000\000\000\000\000\000\024\000\000\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\067\000\
    \001\000\255\255\043\000\255\255\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\052\000\034\000\
    \255\255\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\000\000\052\000\051\000\033\000\052\000\
    \055\000\057\000\058\000\032\000\063\000\052\000\034\000\066\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\052\000\068\000\070\000\000\000\052\000\000\000\
    \000\000\000\000\035\000\000\000\000\000\033\000\033\000\000\000\
    \062\000\000\000\032\000\032\000\000\000\000\000\255\255\037\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \036\000\050\000\050\000\000\000\050\000\054\000\054\000\054\000\
    \000\000\069\000\035\000\000\000\000\000\033\000\062\000\062\000\
    \255\255\065\000\032\000\000\000\000\000\000\000\000\000\037\000\
    \000\000\000\000\000\000\000\000\042\000\065\000\042\000\000\000\
    \036\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\255\255\
    \033\000\255\255\255\255\065\000\000\000\032\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \033\000\000\000\000\000\000\000\000\000\032\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\032\000\000\000\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\032\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\003\000\000\000\004\000\004\000\029\000\
    \004\000\005\000\005\000\255\255\005\000\006\000\006\000\255\255\
    \006\000\007\000\007\000\255\255\007\000\255\255\255\255\255\255\
    \000\000\255\255\060\000\000\000\004\000\255\255\255\255\004\000\
    \005\000\048\000\055\000\005\000\006\000\255\255\043\000\006\000\
    \007\000\007\000\007\000\035\000\035\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\012\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \009\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\010\000\
    \013\000\014\000\015\000\016\000\017\000\017\000\018\000\018\000\
    \019\000\020\000\021\000\022\000\023\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\040\000\040\000\020\000\
    \030\000\044\000\009\000\030\000\045\000\021\000\046\000\047\000\
    \255\255\255\255\255\255\255\255\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\056\000\030\000\
    \058\000\059\000\255\255\255\255\010\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\255\255\
    \255\255\255\255\255\255\024\000\255\255\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\066\000\
    \000\000\003\000\025\000\055\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\061\000\026\000\
    \007\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\038\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\255\255\049\000\050\000\026\000\051\000\
    \053\000\054\000\057\000\026\000\062\000\063\000\027\000\064\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\067\000\065\000\069\000\255\255\070\000\255\255\
    \255\255\255\255\027\000\255\255\255\255\027\000\026\000\255\255\
    \061\000\255\255\027\000\026\000\255\255\255\255\009\000\027\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \027\000\049\000\050\000\255\255\051\000\053\000\054\000\057\000\
    \255\255\068\000\027\000\255\255\255\255\027\000\062\000\063\000\
    \010\000\064\000\027\000\255\255\255\255\255\255\255\255\027\000\
    \255\255\255\255\255\255\255\255\033\000\065\000\033\000\255\255\
    \027\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\056\000\
    \034\000\058\000\059\000\068\000\255\255\034\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\042\000\042\000\042\000\042\000\
    \042\000\042\000\042\000\042\000\042\000\042\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \034\000\255\255\255\255\255\255\255\255\034\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\039\000\039\000\039\000\
    \039\000\039\000\039\000\255\255\255\255\066\000\255\255\255\255\
    \255\255\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\255\255\061\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\039\000\039\000\039\000\
    \039\000\039\000\039\000\041\000\255\255\049\000\050\000\255\255\
    \051\000\053\000\054\000\057\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\062\000\063\000\255\255\064\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \067\000\065\000\069\000\041\000\070\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\068\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec line_start lexbuf =
    __ocaml_lex_line_start_rec lexbuf 0
and __ocaml_lex_line_start_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 164 "lexer.mll"
                                      ( line_start lexbuf)
# 328 "lexer.ml"

  | 1 ->
# 165 "lexer.mll"
                    ( line_start lexbuf)
# 333 "lexer.ml"

  | 2 ->
let
# 166 "lexer.mll"
                  s
# 339 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 166 "lexer.mll"
                     ( INDENT_SPACE (String.length s) )
# 343 "lexer.ml"

  | 3 ->
# 167 "lexer.mll"
                    ( ENDMARKER )
# 348 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_line_start_rec lexbuf __ocaml_lex_state

and line_middle lexbuf =
    __ocaml_lex_line_middle_rec lexbuf 7
and __ocaml_lex_line_middle_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 171 "lexer.mll"
                     ( line_middle lexbuf )
# 359 "lexer.ml"

  | 1 ->
# 172 "lexer.mll"
                     ( line_middle lexbuf)
# 364 "lexer.ml"

  | 2 ->
# 173 "lexer.mll"
                    ( NEWLINE )
# 369 "lexer.ml"

  | 3 ->
let
# 174 "lexer.mll"
             num
# 375 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 174 "lexer.mll"
                    ( NUMBER (int_of_string num) )
# 379 "lexer.ml"

  | 4 ->
let
# 175 "lexer.mll"
                id
# 385 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 175 "lexer.mll"
                     ( begin try (lookup_keyword id) with Not_found -> NAME id end)
# 389 "lexer.ml"

  | 5 ->
let
# 176 "lexer.mll"
           p
# 395 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 176 "lexer.mll"
                    ( lookup_punct p)
# 399 "lexer.ml"

  | 6 ->
let
# 177 "lexer.mll"
             s
# 405 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 177 "lexer.mll"
                     ( STRING s )
# 409 "lexer.ml"

  | 7 ->
# 178 "lexer.mll"
                    ( raise (Lex_Error ("Unexpected character")))
# 414 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_line_middle_rec lexbuf __ocaml_lex_state

;;

# 182 "lexer.mll"
 
let incer int_box =
    int_box := !int_box + 1

let decer int_box =
    int_box := !int_box - 1

let gen_lexer () =
    let last_token = ref NEWLINE 
    and indent_stack = ref [0]
    and curr_indent = ref 0
    and l_brace_cnt = ref 0
    and l_paren_cnt = ref 0
    and l_bracket_cnt = ref 0 in

    (* helper helper fcns *)
    let set_return token =
        last_token := token;
        token
    and do_print_nl () =
        !l_brace_cnt + !l_bracket_cnt + !l_paren_cnt <= 0 in

    (* decides whether to return the result of lex_fun on lexbuf, and if so then
        * set up the next function to call appropriately *)
    let rec returner lex_fun lexbuf =
        let token = lex_fun lexbuf in
        match token with
        LBRACKET -> incer l_bracket_cnt; set_return token
        | RBRACKET -> decer l_bracket_cnt; set_return token
        | LPAREN -> incer l_paren_cnt; set_return token
        | RPAREN -> decer l_paren_cnt; set_return token
        | LBRACE -> incer l_brace_cnt; set_return token
        | RBRACE -> decer l_brace_cnt; set_return token
        | NEWLINE -> if do_print_nl () then set_return token
        else lex_wrapper lexbuf
        | _ -> set_return token

    and lex_wrapper lexbuf = 
        match !last_token with
        NEWLINE -> ws_pusher lexbuf
        | DEDENT -> ws_popper lexbuf
        | ENDMARKER -> pop_all_remaining ()
        | _ -> returner line_middle lexbuf

    and ws_pusher lexbuf =
        (* line_start returns either INDENT_SPACE or ENDMARKER *)
        match line_start lexbuf with
        INDENT_SPACE c -> 
            if c > !curr_indent then 
                begin
                    curr_indent := c;
                    indent_stack := c::(!indent_stack); 
                    returner (fun x -> INDENT) lexbuf
            end
        else if c = !curr_indent then returner line_middle lexbuf
            else begin curr_indent := c; ws_popper lexbuf end
        | ENDMARKER -> last_token := ENDMARKER; pop_all_remaining ()
        | _ -> raise (Lex_Error "Line start returned neither INDENT_SPACE nor ENDMARKER")

    and ws_popper lexbuf =
        let stack_top = List.hd (!indent_stack) in
        if stack_top < !curr_indent then raise Indent_Error
        else if stack_top = !curr_indent then returner line_middle lexbuf
        else 
            begin
                indent_stack := List.tl (!indent_stack);
                returner (fun x -> DEDENT) lexbuf
            end
    and pop_all_remaining () =
        if List.hd (!indent_stack) = 0 then ENDMARKER
        else 
            begin
                indent_stack := List.tl (!indent_stack);
                DEDENT
            end
        in

        (fun lexbuf -> lex_wrapper lexbuf)

# 500 "lexer.ml"
